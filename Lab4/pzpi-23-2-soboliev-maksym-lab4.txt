МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 
Кафедра «Програмна інженерія»
 
 




ЗВІТ
з практичної роботи №4  
з дисципліни «Скриптові мови програмування»


 



 










Виконав:                                                                                 Прийняв:
ст. гр. ПЗПІ-23-2                                                              ст. викл. Сокорчкук І. П. 
Соболєв М.А.










Харків 2025
1. Мета та завдання роботи
Мета роботи – поглиблення практичних навичок у розробці динамічних веб-сайтів на PHP шляхом реалізації системи автентифікації користувачів, управління доступом та створення профілю користувача з можливістю завантаження файлів.
Завдання роботи:
1. Рефакторинг структури сайту для уникнення дублювання коду шляхом винесення шапки та підвалу в окремі файли (header.php, footer.php).
2. Створення сторінки входу (login.php) та реалізація механізму автентифікації на основі даних з файлу credential.php.
3. Обмеження доступу до сторінок магазину для неавторизованих користувачів з перенаправленням на сторінку з відповідним повідомленням.
4. Використання сесій ($_SESSION) для зберігання стану автентифікації користувача.
5. Створення сторінки профілю (profile.php), де користувач може редагувати свої дані та завантажувати фото.
6. Реалізація механізму завантаження файлів на сервер з валідацією та збереженням даних профілю у файлі.
2. Теоретичні відомості
Для виконання завдання були використані такі технології та концепції:
* PHP (Hypertext Preprocessor): Серверна скриптова мова, яка використовувалася для генерації динамічного HTML-контенту, обробки даних форм та управління сесіями.
* Веб-сервер Apache: Програмне забезпечення, що відповідає за обробку HTTP-запитів від клієнта (браузера) та запуск PHP-інтерпретатора для виконання скриптів.
* HTML (HyperText Markup Language): Мова розмітки для створення структури веб-сторінок (заголовки, форми, таблиці, посилання).
* CSS (Cascading Style Sheets): Мова для опису зовнішнього вигляду сторінки. Використовувалася для стилізації елементів, щоб зробити інтерфейс більш читабельним та привабливим.
* Маршрутизація (Routing): Реалізовано простий механізм маршрутизації в головному файлі index.php за допомогою конструкції switch та GET-параметра page. Це дозволяє динамічно підключати вміст різних сторінок (products, cart, profile, login) в єдиний шаблон.
* Автентифікація: Процес перевірки особи користувача. В даній роботі реалізовано шляхом порівняння введених логіна та пароля з даними, що зберігаються в масиві у файлі credential.php.
* Управління сесіями: Розширено використання сесій для зберігання не тільки кошика, а й даних про автентифікацію користувача (логін, час входу). Функція session_destroy() використовується для реалізації виходу з системи.
* Обробка завантаження файлів: PHP надає глобальний масив $_FILES для доступу до даних завантажених файлів. Для завантаження файлів HTML-форма повинна мати атрибут enctype="multipart/form-data". Функції move_uploaded_file() та is_uploaded_file() використовуються для безпечного переміщення файлу з тимчасової директорії сервера до постійного місця зберігання.
* Перенаправлення (Redirect): Функція header('Location: ...') використовується для перенаправлення користувача на іншу сторінку після успішного виконання дії (логін, додавання в кошик, вихід).
3. Опис програмної реалізації
Проект було розширено та реструктуризовано. Він складається з таких файлів:
1. index.php (Головний маршрутизатор): Цей файл тепер виконує роль єдиної точки входу. Він підключає header.php, потім за допомогою конструкції switch аналізує GET-параметр page та підключає відповідний файл контенту (products.php, cart.php, login.php або profile.php). Також він містить логіку перевірки автентифікації: якщо користувач не залогінений і намагається отримати доступ до будь-якої сторінки, окрім логіну, він бачить сторінку-заглушку page404.php.
2. products.php: Містить логіку та розмітку сторінки з товарами. Функціонал аналогічний файлу index.php з попередньої роботи.
3. cart.php: Перейменований basket.php. Містить логіку та розмітку сторінки кошика.
4. login.php: Містить форму для введення логіна та пароля, а також серверний код для обробки цих даних. При надсиланні форми, скрипт порівнює введені дані з тими, що зберігаються в credential.php. У разі успіху, дані про користувача записуються в сесію, і відбувається перенаправлення на головну сторінку.
5. logout.php: Скрипт, що знищує сесію користувача і перенаправляє його на сторінку входу.
6. profile.php: Відображає форму для редагування даних профілю (ім'я, прізвище, дата народження, інформація, фото). При завантаженні сторінки, поля заповнюються даними з файлу profile_data.php. При відправці форми, дані валідуються (на вік, довжину тексту), а завантажений файл перевіряється на тип та розмір. Успішно валідовані дані зберігаються у файл profile_data.php, а фото переміщується в папку uploads/.
7. header.php: Оновлений файл, що тепер містить умову: якщо користувач авторизований, відображаються посилання "Профіль" та "Вийти". Якщо ні - посилання "Увійти".
8. Допоміжні файли: footer.php, style.css, credential.php (зберігає логін/пароль), profile_data.php (зберігає дані профілю), page404.php (повідомлення для неавторизованих користувачів).
4. Результати виконання
4.1. Сторінка входу та обмеження доступу
При спробі зайти на сайт, не будучи авторизованим, користувач бачить повідомлення з пропозицією увійти в систему. Навігаційне меню містить пункт "Увійти".
  

Натиснувши на посилання, користувач потрапляє на сторінку логіну з формою для введення облікових даних.
  

4.2. Робота сайту після автентифікації
Після успішного входу користувач бачить сторінку з товарами. В меню замість "Увійти" з'являються пункти "Профіль" та "Вийти".
  

4.3. Сторінка профілю
На сторінці профілю користувач може редагувати свої дані та завантажувати фото. Форма відображає поточні збережені дані.
  

4.4. Процес виходу (Logout)
При натисканні на кнопку "Вийти" сесія користувача знищується, і його перенаправляє на сторінку входу.
  

5. Висновки
В ході виконання лабораторної роботи було значно розширено функціонал веб-магазину. Реалізовано ключові механізми сучасних веб-застосунків: автентифікація, управління доступом на основі сесій та створення профілю користувача з можливістю завантаження файлів.
Структура проекту була покращена шляхом впровадження базової маршрутизації та використання модульних файлів header.php та footer.php, що відповідає принципу DRY (Don't Repeat Yourself). Було отримано практичний досвід роботи з глобальними масивами $_POST та $_FILES для обробки даних форм та завантажених файлів.
Дана робота демонструє комплексний підхід до розробки веб-сайту, що вимагає не тільки знань мови програмування, а й розуміння принципів роботи HTTP, сесій та взаємодії клієнтської і серверної частин. Всі поставлені завдання були виконані.
________________
ДОДАТОК А. Код програми
index.php (маршрутизатор)
<?php
session_start();
$is_logged_in = isset($_SESSION['user']);
$page = $_GET['page'] ?? 'products';


if (!$is_logged_in && $page !== 'login') {
    $page = 'page404';
}


include 'header.php';


switch ($page) {
    case 'cart':
        require_once('cart.php');
        break;
    case 'profile':
        require_once('profile.php');
        break;
    case 'login':
        require_once('login.php');
        break;
    case 'products':
        require_once('products.php');
        break;
    default:
        require_once('page404.php');
        break;
}


include 'footer.php';


login.php
<?php
if (isset($_SESSION['user'])) {
    header('Location: index.php?page=products');
    exit;
}
require_once 'credential.php';
$error_message = '';


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'] ?? '';
    $password = $_POST['password'] ?? '';


    if (empty($username) || empty($password)) {
        $error_message = 'Будь ласка, заповніть обидва поля.';
    } 
    elseif ($username === $credentials['userName'] && $password === $credentials['password']) {
        $_SESSION['user'] = [
            'username' => $username,
            'login_time' => date('Y-m-d H:i:s')
        ];
        header('Location: index.php?page=products');
        exit;
    } else {
        $error_message = 'Неправильне ім\'я користувача або пароль.';
    }
}
?>


<h2>Вхід в систему</h2>
<?php if (!empty($error_message)): ?>
    <div class="error-message"><?php echo $error_message; ?></div>
<?php endif; ?>
<form method="POST" action="index.php?page=login">
    <!-- ... HTML-код полів форми ... -->
</form>


profile.php
<?php
$profile_file = 'profile_data.php';
$profile_data = include $profile_file;
$error_message = '';
$success_message = '';


if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // ... Логіка валідації та збереження даних профілю ...
    // ... Логіка обробки завантаженого фото ...
}
?>


<h2>Профіль користувача</h2>
<!-- ... HTML-код форми профілю ... -->


header.php
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <title>Web-магазин "Весна"</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header><h1>Web-магазин "Весна"</h1></header>
    <nav>
        <a href="index.php?page=products">Товари</a>
        <?php if (isset($_SESSION['user'])): ?>
            <a href="index.php?page=cart">Кошик</a>
            <a href="index.php?page=profile">Профіль</a>
            <a href="logout.php">Вийти</a>
        <?php else: ?>
            <a href="index.php?page=login">Увійти</a>
        <?php endif; ?>
    </nav>
    <main>