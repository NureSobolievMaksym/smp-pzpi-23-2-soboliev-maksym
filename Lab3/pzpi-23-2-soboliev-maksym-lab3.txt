МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 
Кафедра «Програмна інженерія»
 
 




ЗВІТ
з практичної роботи №3  
з дисципліни «Скриптові мови програмування»


 



 










Виконав:                                                                                 Прийняв:
ст. гр. ПЗПІ-23-2                                                              ст. викл. Сокорчкук І. П. 
Соболєв М.А.










Харків 2025
1. Мета та завдання роботи
Мета роботи – здобуття практичних навичок у розробці динамічних веб-сайтів за допомогою мови PHP. Ознайомлення з механізмом сесій для зберігання даних користувача між запитами та обробкою даних веб-форм.
Завдання роботи:
1. Створити структуру сайту, що складається з шапки (header), тіла (main) та підвалу (footer), використовуючи HTML та CSS.
2. Розробити сторінку товарів (index.php), яка відображає список доступних продуктів, їх ціни та поля для вводу кількості.
3. Реалізувати обробку форми на сторінці товарів, яка надсилає дані методом POST.
4. Використовувати механізм сесій PHP ($_SESSION) для зберігання товарів, обраних користувачем (формування кошика).
5. Розробити сторінку кошика (basket.php), яка відображає вміст сесії у вигляді таблиці з розрахунком загальної вартості.
6. Реалізувати функціонал видалення товарів з кошика.
7. Забезпечити валідацію вхідних даних з форми та відображення повідомлень про помилки.
2. Теоретичні відомості
Для виконання завдання були використані такі технології та концепції:
* PHP (Hypertext Preprocessor): Серверна скриптова мова, яка використовувалася для генерації динамічного HTML-контенту, обробки даних форм та управління сесіями.
* Веб-сервер Apache: Програмне забезпечення, що відповідає за обробку HTTP-запитів від клієнта (браузера) та запуск PHP-інтерпретатора для виконання скриптів.
* HTML (HyperText Markup Language): Мова розмітки для створення структури веб-сторінок (заголовки, форми, таблиці, посилання).
* CSS (Cascading Style Sheets): Мова для опису зовнішнього вигляду сторінки. Використовувалася для стилізації елементів, щоб зробити інтерфейс більш читабельним та привабливим.
* Метод POST: Один з основних методів HTTP-запиту, що використовується для надсилання даних (наприклад, з HTML-форми) на сервер. Дані передаються в тілі запиту, що є більш безпечним для передачі об'ємної інформації.
* PHP Сесії ($_SESSION): Механізм, що дозволяє зберігати інформацію для конкретного користувача на сервері протягом кількох відвідувань сторінок. У даній роботі сесії використовуються для зберігання вмісту кошика. Сесія ініціюється функцією session_start().
3. Опис програмної реалізації
Проект складається з п'яти основних файлів, що забезпечують його модульність та функціональність:
1. index.php (Сторінка товарів): Головна сторінка магазину. Вона містить масив $products з асортиментом товарів. На сторінці генерується HTML-форма, де для кожного товару виводиться його назва, ціна та поле input type="number" для вказування кількості. Форма надсилає дані на цю ж сторінку методом POST. Скрипт перевіряє, чи є POST-запит, валідує отриману кількість (перевіряє, що це ціле число більше нуля) і записує валідні дані в сесійний масив $_SESSION['cart']. Після успішної обробки користувач перенаправляється на сторінку кошика за допомогою header('Location: basket.php').
2. basket.php (Сторінка кошика): Ця сторінка зчитує дані з $_SESSION['cart']. Якщо кошик порожній, виводиться відповідне повідомлення з посиланням на головну сторінку. Якщо в кошику є товари, вони виводяться у вигляді таблиці, де для кожного товару розраховується сумарна вартість та виводиться загальна сума до сплати. Також реалізовано функцію видалення товару: посилання "Вилучити" містить GET-параметр ?remove=ID_ТОВАРУ, який обробляється на початку скрипта, видаляючи відповідний елемент з масиву $_SESSION['cart'].
3. header.php та footer.php: Ці файли містять відповідно верхню (шапка, навігація) та нижню (підвал) частини HTML-розмітки. Вони підключаються на сторінках index.php та basket.php за допомогою функції include. Такий підхід дозволяє уникнути дублювання коду та легко змінювати дизайн в одному місці.
4. style.css: Зовнішній файл стилів, що підключається в header.php. Він містить CSS-правила для оформлення всіх елементів сайту: таблиць, форм, кнопок, шапки та підвалу.
4. Результати виконання
4.1. Головна сторінка з товарами
На головній сторінці index.php відображається список доступних товарів. Користувач може ввести бажану кількість для кожного товару.
  

4.2. Обробка помилки вводу
Якщо користувач вводить некоректні дані (наприклад, нечислове значення або "0") та натискає кнопку "Купити", він залишається на тій самій сторінці, де з'являється повідомлення про помилку.
  

4.3. Сторінка кошика з обраними товарами
Після успішного додавання товарів користувач перенаправляється на сторінку basket.php, де у вигляді таблиці відображається вміст кошика: назва товару, ціна, кількість, загальна вартість по кожній позиції та загальна сума до сплати.
  

4.4. Сторінка порожнього кошика
Якщо користувач переходить до кошика, не обравши жодного товару, або видаливши всі товари, він бачить повідомлення про те, що кошик порожній, та посилання для повернення на сторінку товарів.
  

5. Висновки
В ході виконання лабораторної роботи було створено повноцінний прототип інтернет-магазину на PHP. Були успішно застосовані базові технології веб-розробки: HTML для структурування, CSS для стилізації та PHP для реалізації серверної логіки.
Було освоєно ключовий механізм PHP-сесій, який дозволив організувати зберігання стану (кошика) для кожного окремого користувача. Також було набуто практичних навичок з обробки даних HTML-форм, що надсилаються методом POST, та їх валідації на сервері. Структурування проекту за допомогою модульних файлів (header.php, footer.php) продемонструвало ефективність такого підходу для підтримки та масштабування коду.
Всі завдання лабораторної роботи були виконані у повному обсязі.
________________
ДОДАТОК А. Код програми
index.php
<?php
// Починаємо сесію, щоб зберігати дані кошика
session_start();


// Список товарів
$products = [
    1 => ['name' => 'Coca-Cola', 'price' => 15],
    2 => ['name' => 'Fanta', 'price' => 14],
    3 => ['name' => 'Sprite', 'price' => 14],
    4 => ['name' => 'Nuts', 'price' => 25],
    5 => ['name' => 'Snickers', 'price' => 22],
];


// Обробка POST-запиту (коли користувач натискає "Купити")
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }
    $has_valid_items = false;
    if (isset($_POST['quantities'])) {
        foreach ($_POST['quantities'] as $productId => $quantity) {
            $quantity = filter_var($quantity, FILTER_VALIDATE_INT);
            if ($quantity && $quantity > 0) {
                $_SESSION['cart'][$productId] = ($quantity);
                $has_valid_items = true;
            }
        }
    }
    if ($has_valid_items) {
        header('Location: basket.php');
        exit;
    } else {
        $_SESSION['error_message'] = "Перевірте будь ласка введені дані. Кількість має бути цілим числом більше 0.";
        header('Location: index.php');
        exit;
    }
}


include 'header.php';
?>


<h2>Список товарів</h2>


<?php
if (isset($_SESSION['error_message'])) {
    echo '<div class="error-message">' . $_SESSION['error_message'] . '</div>';
    unset($_SESSION['error_message']);
}
?>


<form method="POST" action="index.php">
    <?php foreach ($products as $id => $product): ?>
        <div class="product-item">
            <span><?php echo htmlspecialchars($product['name']); ?> - $<?php echo $product['price']; ?></span>
            <input type="number" name="quantities[<?php echo $id; ?>]" value="0" min="0">
        </div>
    <?php endforeach; ?>
    <button type="submit">Купити</button>
</form>


<?php
include 'footer.php';
?>


basket.php
<?php
session_start();
$products = [
    1 => ['name' => 'Coca-Cola', 'price' => 15],
    2 => ['name' => 'Fanta', 'price' => 14],
    3 => ['name' => 'Sprite', 'price' => 14],
    4 => ['name' => 'Nuts', 'price' => 25],
    5 => ['name' => 'Snickers', 'price' => 22],
];


if (isset($_GET['remove'])) {
    $productIdToRemove = (int)$_GET['remove'];
    if (isset($_SESSION['cart'][$productIdToRemove])) {
        unset($_SESSION['cart'][$productIdToRemove]);
    }
    header('Location: basket.php');
    exit;
}


$cart = isset($_SESSION['cart']) ? $_SESSION['cart'] : [];


include 'header.php';
?>


<h2>Ваш кошик</h2>


<?php if (empty($cart)): ?>
    <p class="cart-empty">Кошик порожній. <a href="index.php">Перейти до покупок</a>.</p>
<?php else: ?>
    <table>
        <thead>
            <tr>
                <th>id</th>
                <th>Назва</th>
                <th>Ціна</th>
                <th>Кількість</th>
                <th>Сума</th>
                <th>Дія</th>
            </tr>
        </thead>
        <tbody>
            <?php
            $totalSum = 0;
            foreach ($cart as $productId => $quantity):
                if (isset($products[$productId])):
                    $product = $products[$productId];
                    $sum = $product['price'] * $quantity;
                    $totalSum += $sum;
            ?>
                <tr>
                    <td><?php echo $productId; ?></td>
                    <td><?php echo htmlspecialchars($product['name']); ?></td>
                    <td>$<?php echo $product['price']; ?></td>
                    <td><?php echo $quantity; ?></td>
                    <td>$<?php echo $sum; ?></td>
                    <td><a href="basket.php?remove=<?php echo $productId; ?>">Вилучити</a></td>
                </tr>
            <?php 
                endif;
            endforeach;
            ?>
        </tbody>
        <tfoot>
            <tr>
                <td colspan="4" style="text-align: right; font-weight: bold;">РАЗОМ ДО СПЛАТИ:</td>
                <td colspan="2" style="font-weight: bold;">$<?php echo $totalSum; ?></td>
            </tr>
        </tfoot>
    </table>
<?php endif; ?>


<?php
include 'footer.php';
?>